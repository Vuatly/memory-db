// Code generated by mockery v2.42.1. DO NOT EDIT.

package compute

import mock "github.com/stretchr/testify/mock"

// AnalyzerMock is an autogenerated mock type for the analyzer type
type AnalyzerMock struct {
	mock.Mock
}

type AnalyzerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AnalyzerMock) EXPECT() *AnalyzerMock_Expecter {
	return &AnalyzerMock_Expecter{mock: &_m.Mock}
}

// AnalyzeTokens provides a mock function with given fields: tokens
func (_m *AnalyzerMock) AnalyzeTokens(tokens []string) (Query, error) {
	ret := _m.Called(tokens)

	if len(ret) == 0 {
		panic("no return value specified for AnalyzeTokens")
	}

	var r0 Query
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) (Query, error)); ok {
		return rf(tokens)
	}
	if rf, ok := ret.Get(0).(func([]string) Query); ok {
		r0 = rf(tokens)
	} else {
		r0 = ret.Get(0).(Query)
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(tokens)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnalyzerMock_AnalyzeTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AnalyzeTokens'
type AnalyzerMock_AnalyzeTokens_Call struct {
	*mock.Call
}

// AnalyzeTokens is a helper method to define mock.On call
//   - tokens []string
func (_e *AnalyzerMock_Expecter) AnalyzeTokens(tokens interface{}) *AnalyzerMock_AnalyzeTokens_Call {
	return &AnalyzerMock_AnalyzeTokens_Call{Call: _e.mock.On("AnalyzeTokens", tokens)}
}

func (_c *AnalyzerMock_AnalyzeTokens_Call) Run(run func(tokens []string)) *AnalyzerMock_AnalyzeTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *AnalyzerMock_AnalyzeTokens_Call) Return(_a0 Query, _a1 error) *AnalyzerMock_AnalyzeTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AnalyzerMock_AnalyzeTokens_Call) RunAndReturn(run func([]string) (Query, error)) *AnalyzerMock_AnalyzeTokens_Call {
	_c.Call.Return(run)
	return _c
}

// NewAnalyzerMock creates a new instance of AnalyzerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAnalyzerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AnalyzerMock {
	mock := &AnalyzerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
